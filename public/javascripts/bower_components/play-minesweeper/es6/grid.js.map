{"version":3,"sources":["../src/grid.js"],"names":[],"mappings":"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","file":"grid.js","sourcesContent":["/**\n * ECMAScript 2015 (ES6) version of grid.js\n */\n(function(root, factory) {\n  root.MSPolymer = factory(root, {});\n}(this || window /* environment global */, (root, MSPolymer) => {\n\n  class Cell {\n    constructor(i, j) {\n      this.mine = false;\n      this.revealed = false;\n      this.flagged = false;\n      this.risk = 0;\n      this.id = `cid_${i}_${j}`;\n      this.memoizedRevealedVal; // memoized display value\n    }\n\n    revealedVal() {\n      if (this.memoizedRevealedVal !== undefined) {\n        return this.memoizedRevealedVal;\n      } else if(this.mine) {\n        this.memoizedRevealedVal = '*';\n      } else if(this.risk === 0) {\n        this.memoizedRevealedVal = '';\n      } else {\n        this.memoizedRevealedVal = this.risk;\n      }\n      return this.memoizedRevealedVal;\n    }\n\n    color() {\n      if(this.mine) {\n        return '#000';\n      }\n      let color = '';\n      switch(this.risk) {\n        case 1: color = 'blue'; break;\n        case 2: color = 'green'; break;\n        case 3: color = 'red'; break;\n        case 4: color = 'purple'; break;\n        case 5: color = 'maroon'; break;\n        case 6: color = 'turquoise'; break;\n        case 7: color = 'black'; break;\n        case 8: color = 'grey'; break;\n      }\n      return color;\n    }\n  }\n\n  class Grid {\n    constructor(rows, columns, mines) {\n      this.grid = [];\n      this.mineArray = [];\n      this.rows = rows;\n      this.columns = columns;\n      this.mines = mines;\n      \n      // Generate grid of empty Cell Objects\n      for(let i = 0; i < rows; i++) {\n        this.grid[i] = [];\n        for(let j = 0; j < columns; j++) {\n          this.grid[i][j] = new Cell(i, j);\n        }\n      }\n\n      // Seed mines randomly in grid and calculate each cell's risk\n      for(let c = 0; c < mines; c++) {\n        let a = Math.floor(rows * Math.random());\n        let b = Math.floor(columns * Math.random());\n        if (this.grid[a][b].mine === true) {\n          c--;\n          continue;\n        }\n        this.grid[a][b].mine = true;\n        this.mineArray.push(this.grid[a][b].id)\n        let incrementRisk = this.forEachSurroudingCell(a, b);\n        incrementRisk((r, c) => this.grid[r][c].risk += 1);\n      }\n    }\n    \n    /**\n     * A curry helper method that captures the target cell location\n     * in a closure to be used later by the callback(row, column).\n     * The curried method will invoke the callback for each surrounding cell\n     * that is inside the grid.\n     * @param  {number}  row\n     * @param  {number}  col\n     */\n    forEachSurroudingCell(row, col) {\n      /**\n       * Invokes the callback for each neighboring cell that is inside the grid\n       * @param {Function} callback - takes optional (row, column) arguments\n       * @param {Object} context - if no context is passed, it will default to the grid.\n       */\n      return (callback, context = this) => {\n        let isInsideGrid = false;\n        for(let i = -1; i <= 1; i++) {\n          for(let j = -1; j <= 1; j++) {\n            isInsideGrid = (row + i >= 0 && col + j >= 0 && row + i < this.rows && col + j < this.columns);\n            if(isInsideGrid && !(i === 0 && j === 0)) {\n              callback.call(context, row + i, col + j);\n            }\n          }\n        }\n      };\n    }\n\n    /**\n     * Maps and reduces the grid's 2d array using each cell's\n     * `revealed` and `flagged` attributes as counters.\n     * @return {Boolean} - true if rows * columns equals # of revealed cells + # of flagged cells\n     */\n    hasWon() {\n      function sumCounters(p, c) {\n        return { revealed: p.revealed + c.revealed, flagged: p.flagged + c.flagged };\n      }\n      let counters = this.grid\n        .map((row) =>\n          row.map((cell) => {\n            return { revealed: cell.revealed ? 1 : 0, flagged: cell.flagged ? 1 : 0 };\n          })\n          .reduce(sumCounters))\n        .reduce(sumCounters);\n      return this.rows * this.columns === counters.revealed + counters.flagged;\n    }\n  }\n\n  MSPolymer.Grid = Grid;\n\n  return MSPolymer;\n}));\n\n"]}