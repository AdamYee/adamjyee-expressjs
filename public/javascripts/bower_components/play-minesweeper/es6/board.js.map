{"version":3,"sources":["../src/board.js"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["'use strict';\nvar PlayMS = Polymer({\n  is: 'ms-board',\n  properties: {\n    rows:           Number,\n    columns:        Number,\n    mines:          Number,\n    flagCount:      { type: Number, value: 0 },\n    gameOver:       { type: Boolean, value: false },\n    win:            { type: Boolean, value: false },\n    doneExploding:  { type: Boolean, value: false },\n    grid: Object,\n\n    alreadyRevealed: {\n      type: Object,\n      value: function() { return {}; }\n    },\n    _gameEndMessage: {\n      type: String, computed: 'computedEndMessage(win)'\n    },\n    _gameEndCss: {\n      type: String, computed: 'computedEndCss(doneExploding, win)'\n    },\n    _gameEndColor: {\n      type: String, computed: 'computedEndColor(win)'\n    }\n  },\n  computedEndMessage(win) {\n    return win ? 'YOU WIN' : 'GAME OVER';\n  },\n  computedEndCss(doneExploding, win) {\n    if(doneExploding || win) {\n      Polymer.dom(this.$['game-end']).classList.add('show');\n    } else {\n      Polymer.dom(this.$['game-end']).classList.remove('show');\n    }\n  },\n  computedEndColor(win) {\n    return 'color:' + (win ? 'green' : 'red');\n  },\n  /**\n   * IMPORTANT: Attributes configured via an element e.g. <x-foo name=\"bar\"></x-foo>\n   * are not available in the `created`lifecycle method. They first become available\n   * in the `ready` lifecycle method.\n   */\n  ready() {\n    this.isPlaying = false;\n  },\n  play() {\n    this.gameOver = this.win = this.doneExploding = false;\n    this.flagCount = 0;\n    this.grid = new MSPolymer.Grid(this.rows, this.columns, this.mines);\n    if (this.isPlaying) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          let cell = Polymer.dom(this.$.board).querySelector(`#cid_${i}_${j}`);\n          if (cell) {\n            cell.reset();\n          }\n        }\n      }\n      this.alreadyRevealed = {};\n    }\n    this.isPlaying = true;\n  },\n  flaggedHandler(e) {\n    this.flagCount += e.detail; // 1 or -1\n    this.checkWin();\n  },\n  checkWin() {\n    this.win = this.grid.hasWon();\n    if (this.win) {\n      this.gameOver = true;\n    }\n  },\n  /**\n   * Recursively self reveals cells as 0 risk cells are revealed.\n   * Recursion is oddly handled through animation. See `propagate` on ms-cell.html.\n   */\n  revealNeighbors(e) {\n    \n    let position = e.target.id.split('_').slice(-2); // get grid position from id\n    let row = parseInt(position[0]);\n    let col = parseInt(position[1]);\n    let revealNeighbor = this.grid.forEachSurroudingCell(row, col);\n    revealNeighbor((r, c) => {\n      if(this.alreadyRevealed.hasOwnProperty(`#cid_${r}_${c}`)) {\n        return;\n      }\n      this.alreadyRevealed[`#cid_${r}_${c}`] = true;\n      /**\n       * Common Polymer gotcha:\n       * Automatic node finding only works 1 level deep in the shadow DOM tree.\n       * Anything deeper can be accessed by using `querySelector` on an\n       * automatically found node.\n       */\n      let neighbor = Polymer.dom(this.$.board).querySelector(`#cid_${r}_${c}`);\n      if (!neighbor.cell.flagged) {\n        neighbor.revealed = true; // recursion via data-binding\n      }\n    }, this);\n  },\n  /**\n   * As soon as any mine explodes, this method fires off the rest\n   * to make it a board-wide explosion.\n   */\n  createExplosion(e) {\n    this.gameOver = true;\n\n    let unflaggedMines = 0;\n    let explodedCount = 0;\n    let mineCellIds = this.grid.mineArray.map((id) => `#${id}`).join(',');\n    let minesArr = Array.from(Polymer.dom(this.$.board).querySelectorAll(mineCellIds));\n    minesArr = shuffleArray(minesArr); // shuffle the mines for a random explosion effect\n\n    // know when to show the game over message - after we're done exploding\n    let explode = (e) => {\n      if (e.animationName === 'explode') {\n        explodedCount++;\n        if (explodedCount === unflaggedMines) {\n          this.doneExploding = true\n          this.removeEventListener('webkitAnimationEnd', explode);\n          this.removeEventListener('MSAnimationEnd', explode);\n          this.removeEventListener('animationend', explode);\n        }\n      }\n    };\n    this.addEventListener('webkitAnimationEnd', explode);\n    this.addEventListener('MSAnimationEnd', explode);\n    this.addEventListener('animationend', explode);\n\n    minesArr.forEach((cell, i) => {\n      setTimeout(() => {\n        if (!cell.cell.flagged) {\n          unflaggedMines++;\n          cell.revealed = true; // explode unflagged mines\n        }\n      }, i % 2 === 0 ? i * 15 : i * 12);\n    });\n  }\n});\n\n/*\nUtils\n */\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n"]}