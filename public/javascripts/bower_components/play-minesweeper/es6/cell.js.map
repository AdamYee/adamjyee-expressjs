{"version":3,"sources":["../src/cell.js"],"names":[],"mappings":"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","file":"cell.js","sourcesContent":["Polymer({\n  is: 'ms-cell',\n  properties: {\n    cell: Object,\n    color: {\n      type: String,\n      notify: true\n    },\n    revealed: {\n      type: Boolean,\n      value: false,\n      observer: 'revealedChanged'\n    },\n    hide: {\n      type: Boolean,\n      computed: 'computedHide(cell.flagged, revealed)'\n    },\n    showFlag: { type: Boolean, value: false },\n    displayVal: {\n      type: String,\n      computed: 'computedDisplayVal(cell.flagged, revealed)'\n    }\n  },\n  observers: [\n    'colorChanged(cell.color)'\n  ],\n  colorChanged() {\n    this.color = `color: ${this.cell.color()}`\n  },\n  computedHide(flagged, revealed) {\n    return !flagged && !revealed;\n  },\n  computedDisplayVal(flagged, revealed) {\n    if(flagged && !revealed) {\n      return 'F';\n    } else {\n      return this.cell.revealedVal();\n    }\n  },\n  ready() {\n    this.color = 'color:' + this.cell.color();\n    this.bindPropagate();\n  },\n  bindPropagate() {\n    /**\n     * Recursively reveal a 0 risk cell's neighbors.\n     * And check for wins if revealing a risky cell.\n     */\n    let propagate = () => {\n      // only need to fire reveal-neighbors once\n      if(this.revealed && !this.cell.mine) {\n        this.removeEventListener('webkitAnimationEnd', propagate);\n        this.removeEventListener('MSAnimationEnd', propagate);\n        this.removeEventListener('animationend', propagate);\n        if(this.cell.risk === 0) {\n          this.fire('reveal-neighbors');\n        } else {\n          this.fire('check-win');\n        }\n      }\n    };\n    this.addEventListener('webkitAnimationEnd', propagate);\n    this.addEventListener('MSAnimationEnd', propagate);\n    this.addEventListener('animationend', propagate);\n  },\n  revealedChanged() {\n    if(this.revealed) {\n      this.cell.revealed = true;\n      Polymer.dom(this).classList.add(this.cell.mine ? 'explode' : 'revealed');\n    }\n  },\n  reveal(event, detail, sender) {\n    // do nothing if it's already revealed or if it's been flagged.\n    if(this.revealed || this.cell.flagged) {\n      return;\n    }\n    this.revealed = true;\n    if(this.cell.mine) {\n      this.fire('explosion');\n    }\n  },\n  /**\n   * Event handler for context menu clicks (flagging mines)\n   */\n  flag(e) {\n    e.preventDefault();\n    if(this.revealed) {\n      return;\n    } else {\n      let flag = this.$$('#flag');\n      if(!this.cell.flagged) {\n        Polymer.dom(flag).classList.add('flagged', 'drop-flag');\n        this.cell.flagged = this.showFlag = true;\n        this.color = 'color:orange';\n        this.fire('flagged', 1);\n      } else {\n        let removeFlag = () => {\n          this.cell.flagged = this.showFlag = false;\n          Polymer.dom(flag).classList.remove('flagged', 'pickup-flag');\n          this.color = 'color:' + this.cell.color();\n          this.fire('flagged', -1);\n          this.removeEventListener('webkitAnimationEnd', removeFlag);\n          this.removeEventListener('MSAnimationEnd', removeFlag);\n          this.removeEventListener('animationend', removeFlag);\n        };\n        this.addEventListener('webkitAnimationEnd', removeFlag);\n        this.addEventListener('MSAnimationEnd', removeFlag);\n        this.addEventListener('animationend', removeFlag);\n        /**\n         * Animate the flag pickup:\n         * Removing a class with animation (possible specific to reverse animation)\n         * and then adding a class with animation on different cycles (eventloops)\n         * to prevent flicker and conflicting animation rules.\n         */\n        Polymer.dom(flag).classList.remove('drop-flag');\n        setTimeout(() => {\n          Polymer.dom(flag).classList.add('pickup-flag');\n        }, 0);\n      }\n    }\n  },\n\n  reset() {\n    // hide\n    this.revealed = false;\n    Polymer.dom(this).classList.remove('explode', 'revealed');\n    // unflag\n    this.cell.flagged = this.showFlag = false;\n    let flag = this.$$('#flag');\n    Polymer.dom(flag).classList.remove('flagged', 'drop-flag');\n    // rebind event listeners\n    this.bindPropagate();\n  }\n});\n"]}